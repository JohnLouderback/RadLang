namespace RadCompiler.Utils;

/// <summary>
///   The <see cref="LLVMResultType"> LLVMResultType </see> enum is used to determine how to handle
///   the result of a compilation. A <see cref="LLVMResultType.Success"> Success </see> is a valid
///   value for this enum. This is because the result of a successful compilation is output to stdout,
///   and we need to handle that in the same way as an error. To this end we use this exception as a
///   control flow mechanism and the <see cref="LLVMResult.ResultType"> ResultType </see> property to
///   determine how to handle the result.
/// </summary>
public enum LLVMResultType {
  /// <summary>
  ///   The result of the compilation was successful.
  /// </summary>
  Success,

  /// <summary>
  ///   The result of the compilation was an error.
  /// </summary>
  Error
}

/// <summary>
///   The "LLVM Result" exception exists as a way to handle results that are provided by the LLVM
///   toolchain that we may need to handle upstream of the compiler. An example might be if a function
///   or module validation fails, or if compilation is successful. Rather than strings, LLVM often
///   outputs to stdout. This class allows us to handle those more gracefully by way of the
///   <see cref="GetDetails"> GetDetails </see> and <see cref="CException.GetMessage"> GetMessage </see> properties.
/// </summary>
/// <inheritdoc />
public class LLVMResult : CException {
  public LLVMResultType ResultType { get; }

  public Action? GetDetails { get; }


  /// <inheritdoc cref="LLVMResult" />
  /// <param name="resultType">
  ///   The type of result that was returned by the LLVM toolchain. This is used to determine how to
  ///   handle the result. Counterintuitively, a <see cref="LLVMResultType.Success"> Success </see>
  ///   is a valid value for this parameter. This is because the result of a successful compilation
  ///   is output to stdout, and we need to handle that in the same way as an error. To this end we
  ///   use this exception as a control flow mechanism and the <see cref="ResultType"> ResultType </see>
  ///   property to determine how to handle the result.
  /// </param>
  /// <param name="getMessage">
  ///   A delegate that returns the message to be displayed to the user. This is used so that the
  ///   application that is using the compiler can decide how to handle the message. For example, the
  ///   application may want to display the message in a GUI, or it may want to write it to a log file.
  /// </param>
  /// <param name="getDetails">
  ///   A function that returns the details of the result. This is used so that the application that
  ///   is using the compiler can obtain further contextual information about the result. This is
  ///   typically used to display the error message that was output to stdout by the LLVM toolchain
  ///   or to, for instance, output a the LLVM IR code that was generated by the compiler is a module
  ///   validation fails.
  /// </param>
  public LLVMResult(LLVMResultType resultType, Action getMessage, Action? getDetails = null) : base(
      getMessage
    ) {
    ResultType = resultType;
    GetDetails = getDetails;
  }
}
