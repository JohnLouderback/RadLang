name: Build

on:
  push:
    branches:
      - master

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_VERSION: 8.0.0-preview.3 # Using a preview version for maximum adventure.
  EM_BIN_DIR: .support/emsdk/emsdk-main/emsdk-main/upstream/emscripten/

jobs:
  build-project:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            rid: win-x64
            em-file-ext: .bat
          - os: macos-latest
            rid: osx-x64
            em-file-ext: ''
          # We need the specific version on Ubuntu because the native `libLLVM` cannot
          # otherwise be determined. If we used `linux-x64` instead, llvmSharp would have
          # no way to determine which distro's `libLLVM` to use. Ubuntu 18.04 should
          # provide us with a good balance of compatibility and stability. Furthermore,
          # 18.04 is the version supported by LLVM 14, the version we're currently using.
          # In the future, we may we may need to consider building with additional distros
          # for other architectures and considerataions like `musl`.
          - os: ubuntu-latest
            rid: ubuntu.18.04-x64
            em-file-ext: ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'yarn'

      - name: Install Node modules
        run: yarn install --frozen-lockfile

      - name: Cache Support Files # Cache the support files for faster builds.
        uses: actions/cache@v3
        with:
          # Create a key based on the hash of the init scripts. If those change, we want to invalidate the cache.
          key: support-files-${{ matrix.os }}-${{ hashFiles('scripts/init/**') }}
          path: |
            ./.support/

      # Setup repo with automated initialization scripts.
      - name: Init Repository
        run: yarn repo init -n

      - name: Install CMake
        if: matrix.os != 'windows-latest' # Use the bundled CMake for Visual Studio on Windows.
        uses: lukka/get-cmake@v3.25.2
        with:
          cmakeVersion: 3.24.0
          useCloudCache: ${{!env.ACT}} # Use the "cloud cache" when in the cloud.
          useLocalCache: ${{!!env.ACT}} # Use the local cache when running locally through `act`.

      #- name: Set up Visual Studio shell
      #  if: matrix.os == 'windows-latest'
      #  uses: egor-tensin/vs-shell@v2
      #  with:
      #    arch: x64

      #- name: Set Up MSVC
      #  if: matrix.os == 'windows-latest'
      #  uses: ilammy/msvc-dev-cmd@v1

      - name: Build C project (Unix-like)
        if: matrix.os != 'windows-latest'
        run: |
          cd ./RadLib
          cmake -DBUILDING_DLL=1 -DCMAKE_BUILD_TYPE=Release -Bcmake-build-unix/
          cmake --build cmake-build-unix/ --target RadLib RadLibStatic --config Release
          cd ../

      - name: Build C project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd ./RadLib
          cmake -DBUILDING_DLL=1 -DCMAKE_BUILD_TYPE=Release -Bcmake-build-windows-x64/ -G "Visual Studio 17 2022" -T v143
          cmake --build cmake-build-windows-x64/ --target RadLib RadLibStatic --config Release
          cd ../

      # Activate Emscripten in Unix-like environments.
      - name: Activate Emscripten (Unix-like)
        if: matrix.os != 'windows-latest'
        run: |
          ./.support/emsdk/emsdk-main/emsdk-main/emsdk activate --permanent
          source "./.support/emsdk/emsdk-main/emsdk-main/emsdk_env.sh"

      # Activate Emscripten in Windows environments.
      - name: Activate Emscripten (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./.support/emsdk/emsdk-main/emsdk-main/emsdk.bat activate --permanent

      - name: Verify EMCC
        run: ${{ env.EM_BIN_DIR }}emcc${{ matrix.em-file-ext }} --version

      # Build the Emscripten version of the library.
      - name: Build C project Emscripten
        run: |
          cd ./RadLib
          ../${{ env.EM_BIN_DIR }}emcmake${{ matrix.em-file-ext }} cmake -DBUILDING_DLL=1 -DCMAKE_BUILD_TYPE=Release -Bcmake-build-emscripten/
          cmake --build cmake-build-emscripten/ --target RadLibStatic --config Release
          cd ../

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 8.x
          include-prerelease: true

      - name: Remove MSVC projects from the .sln file (Unix-like)
        if: matrix.os != 'windows-latest'
        run:
          | # The Visual C++ projects are already built by CMake and only included in the .sln for debugging and development.
          perl -i -0pe 's/^.*? = "RadLib.*?\r?\nEndProject//gm' RadLang.sln

      - name: Remove MSVC projects from the .sln file (Windows)
        if: matrix.os == 'windows-latest'
        run:
          | # The Visual C++ projects are already built by CMake and only included in the .sln for debugging and development.
          (Get-Content -Path './RadLang.sln' -Raw) -replace '(?m)^.*? = "RadLib.*?\r?\n?EndProject', '' | Set-Content -Path './RadLang.sln'

      - name: Build .NET project
        run: dotnet build ./RadLang.sln --configuration Release

      - name: Publish .NET project
        run: dotnet publish RadLang.sln --configuration Release --self-contained true --runtime ${{ matrix.rid }} --framework net8.0  /p:DebugType=None /p:DebugSymbols=false

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: rad-${{ matrix.rid }}-${{ github.sha }}
          path: ./Rad/bin/Release/net8.0/${{ matrix.rid }}/publish

      - name: Test .NET project
        run: dotnet test ./RadLang.sln --configuration Release
