<#@ template language="C#" #>
<#@ assembly name="System.Runtime.dll" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
/// This file is generated by `BaseASTVisitor.tt`. Please do not edit directly as it will be overwritten.

namespace RadParser.AST.Node;

/// <summary>
/// An interface for a visitor that can visit all nodes in the AST. This interface is generated through a T4 template so
/// that it can be kept up to date with the AST nodes without having to manually update it every time a new node is added.
/// </summary>
public interface IBaseASTVisitor {
<#
    var path = "./AST/Node/";
    var files = Directory.GetFiles(path);
    foreach (var file in files) {
        var fileName = Path.GetFileNameWithoutExtension(file);

        // Ignore interfaces.
        if (fileName.StartsWith("I")) continue;

        // If the type is generic "Node", discard that.
        if (fileName == "Node" ||
            fileName == "NodeCollection") continue;

        var isAbstract = false;
        var isGeneric = false;

        foreach (var line in File.ReadLines(Path.Combine(path, fileName + ".cs"))) {
            // Check if the class is abstract. We ignore those.
            if (Regex.IsMatch(line, $@"abstract.*?class {fileName}")) {
                isAbstract = true;
                break;
            }

            // Check if the class is generic. We ignore those.
            if (Regex.IsMatch(line, $@"class {fileName}<")) {
                isGeneric = true;
                break;
            }
        }

        if (isAbstract || isGeneric) {
            continue;
        }

        WriteLine($"  void Visit({fileName} node);\n");
    }
#>
<#
    /* Explicitly include any members that couldn't included through the above heuristic. */
#>
  void Visit(Expression node);
  void Visit(Declaration node);
  void Visit(Literal node);
  void Visit(IReference<Identifier> node);
  void Visit(Identifier node);

<#
    /* The base visitor for double dispatch. */
#>
  public void Visit(INode node) {
    Visit((dynamic)node);
  }
}
