//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/John/Projects/RadLang/RadLexer\Rad.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RadLexer {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRadListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RadBaseListener : IRadListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStartRule([NotNull] Rad.StartRuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.startRule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStartRule([NotNull] Rad.StartRuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.topLevel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTopLevel([NotNull] Rad.TopLevelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.topLevel"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTopLevel([NotNull] Rad.TopLevelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] Rad.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] Rad.DeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclaration([NotNull] Rad.FunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclaration([NotNull] Rad.FunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.returnTypeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnTypeSpecifier([NotNull] Rad.ReturnTypeSpecifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.returnTypeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnTypeSpecifier([NotNull] Rad.ReturnTypeSpecifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.typeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeSpecifier([NotNull] Rad.TypeSpecifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.typeSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeSpecifier([NotNull] Rad.TypeSpecifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.voidSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVoidSpecifier([NotNull] Rad.VoidSpecifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.voidSpecifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVoidSpecifier([NotNull] Rad.VoidSpecifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionBody([NotNull] Rad.FunctionBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionBody([NotNull] Rad.FunctionBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] Rad.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] Rad.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.namedTypeTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedTypeTuple([NotNull] Rad.NamedTypeTupleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.namedTypeTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedTypeTuple([NotNull] Rad.NamedTypeTupleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.namedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedParameters([NotNull] Rad.NamedParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.namedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedParameters([NotNull] Rad.NamedParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.namedParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamedParameter([NotNull] Rad.NamedParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.namedParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamedParameter([NotNull] Rad.NamedParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.orderedTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrderedTuple([NotNull] Rad.OrderedTupleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.orderedTuple"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrderedTuple([NotNull] Rad.OrderedTupleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.orderedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrderedParameters([NotNull] Rad.OrderedParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.orderedParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrderedParameters([NotNull] Rad.OrderedParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.orderedParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrderedParameter([NotNull] Rad.OrderedParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.orderedParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrderedParameter([NotNull] Rad.OrderedParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.statementGroup"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementGroup([NotNull] Rad.StatementGroupContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.statementGroup"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementGroup([NotNull] Rad.StatementGroupContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.numberType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberType([NotNull] Rad.NumberTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.numberType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberType([NotNull] Rad.NumberTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementKeyword([NotNull] Rad.StatementKeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.statementKeyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementKeyword([NotNull] Rad.StatementKeywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.definiteStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefiniteStatement([NotNull] Rad.DefiniteStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.definiteStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefiniteStatement([NotNull] Rad.DefiniteStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] Rad.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] Rad.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.binaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOperator([NotNull] Rad.BinaryOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.binaryOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOperator([NotNull] Rad.BinaryOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] Rad.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] Rad.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericLiteral([NotNull] Rad.NumericLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericLiteral([NotNull] Rad.NumericLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="Rad.stringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringLiteral([NotNull] Rad.StringLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="Rad.stringLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringLiteral([NotNull] Rad.StringLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace RadLexer
