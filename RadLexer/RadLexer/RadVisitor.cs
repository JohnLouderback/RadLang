//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/John/Projects/RadLang/RadLexer\Rad.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RadLexer {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="Rad"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IRadVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.startRule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStartRule([NotNull] Rad.StartRuleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.topLevel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTopLevel([NotNull] Rad.TopLevelContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] Rad.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] Rad.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.returnTypeSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnTypeSpecifier([NotNull] Rad.ReturnTypeSpecifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.typeSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeSpecifier([NotNull] Rad.TypeSpecifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.voidSpecifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVoidSpecifier([NotNull] Rad.VoidSpecifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionBody([NotNull] Rad.FunctionBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] Rad.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.namedTypeTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamedTypeTuple([NotNull] Rad.NamedTypeTupleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.namedParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamedParameters([NotNull] Rad.NamedParametersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.namedParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNamedParameter([NotNull] Rad.NamedParameterContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.orderedTuple"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrderedTuple([NotNull] Rad.OrderedTupleContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.orderedParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrderedParameters([NotNull] Rad.OrderedParametersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.orderedParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrderedParameter([NotNull] Rad.OrderedParameterContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.statementGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementGroup([NotNull] Rad.StatementGroupContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.numberType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberType([NotNull] Rad.NumberTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.statementKeyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementKeyword([NotNull] Rad.StatementKeywordContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.definiteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDefiniteStatement([NotNull] Rad.DefiniteStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] Rad.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.binaryOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOperator([NotNull] Rad.BinaryOperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] Rad.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericLiteral([NotNull] Rad.NumericLiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="Rad.stringLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringLiteral([NotNull] Rad.StringLiteralContext context);
}
} // namespace RadLexer
