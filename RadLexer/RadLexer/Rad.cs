//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/John/Projects/RadLang/RadLexer\Rad.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RadLexer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class Rad : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FN=1, VOID=2, UNSIGNED=3, INT_KEYWORD=4, FLOAT_KEYWORD=5, BOOL_KEYWORD=6, 
		RETURN=7, OUT=8, ID=9, FLAG=10, LPAREN=11, RPAREN=12, LCURL=13, RCURL=14, 
		DQUOTE=15, SQUOTE=16, COMMA=17, SEMICOLON=18, COLON=19, THEN=20, STAR=21, 
		PLUS=22, MINUS=23, FSLASH=24, NUMBER=25, WHITESPACE=26, NEWLINE=27, MULT_LINE_COMMENT=28, 
		DOC_COMMENT=29, LINE_COMMENT=30;
	public const int
		RULE_startRule = 0, RULE_topLevel = 1, RULE_declaration = 2, RULE_functionDeclaration = 3, 
		RULE_returnTypeSpecifier = 4, RULE_typeSpecifier = 5, RULE_voidSpecifier = 6, 
		RULE_functionBody = 7, RULE_functionCall = 8, RULE_namedTypeTuple = 9, 
		RULE_namedParameters = 10, RULE_namedParameter = 11, RULE_orderedTuple = 12, 
		RULE_orderedParameters = 13, RULE_orderedParameter = 14, RULE_statementGroup = 15, 
		RULE_numberType = 16, RULE_statementKeyword = 17, RULE_definiteStatement = 18, 
		RULE_expression = 19, RULE_binaryOperator = 20, RULE_literal = 21, RULE_numericLiteral = 22, 
		RULE_stringLiteral = 23;
	public static readonly string[] ruleNames = {
		"startRule", "topLevel", "declaration", "functionDeclaration", "returnTypeSpecifier", 
		"typeSpecifier", "voidSpecifier", "functionBody", "functionCall", "namedTypeTuple", 
		"namedParameters", "namedParameter", "orderedTuple", "orderedParameters", 
		"orderedParameter", "statementGroup", "numberType", "statementKeyword", 
		"definiteStatement", "expression", "binaryOperator", "literal", "numericLiteral", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'fn'", "'void'", "'unsigned'", null, null, "'bool'", "'return'", 
		"'out'", null, null, "'('", "')'", "'{'", "'}'", "'\"'", "'''", "','", 
		"';'", "':'", "'=>'", "'*'", "'+'", "'-'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FN", "VOID", "UNSIGNED", "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", 
		"RETURN", "OUT", "ID", "FLAG", "LPAREN", "RPAREN", "LCURL", "RCURL", "DQUOTE", 
		"SQUOTE", "COMMA", "SEMICOLON", "COLON", "THEN", "STAR", "PLUS", "MINUS", 
		"FSLASH", "NUMBER", "WHITESPACE", "NEWLINE", "MULT_LINE_COMMENT", "DOC_COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rad.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Rad() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Rad(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Rad(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelContext topLevel() {
			return GetRuleContext<TopLevelContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			topLevel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Rad.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefiniteStatementContext[] definiteStatement() {
			return GetRuleContexts<DefiniteStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefiniteStatementContext definiteStatement(int i) {
			return GetRuleContext<DefiniteStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public TopLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterTopLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitTopLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelContext topLevel() {
		TopLevelContext _localctx = new TopLevelContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 33653634L) != 0) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
				case OUT:
				case ID:
				case DQUOTE:
				case SQUOTE:
				case NUMBER:
					{
					State = 50;
					definiteStatement();
					}
					break;
				case FN:
					{
					State = 51;
					declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			functionDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(Rad.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedTypeTupleContext namedTypeTuple() {
			return GetRuleContext<NamedTypeTupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeSpecifierContext returnTypeSpecifier() {
			return GetRuleContext<ReturnTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(Rad.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				Match(FN);
				State = 62;
				Match(ID);
				State = 63;
				namedTypeTuple();
				State = 64;
				returnTypeSpecifier();
				State = 65;
				Match(THEN);
				State = 66;
				functionBody();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(FN);
				State = 69;
				Match(ID);
				State = 70;
				namedTypeTuple();
				State = 71;
				Match(THEN);
				State = 72;
				functionBody();
				NotifyErrorListeners(TokenStream.LT(-1), $"Function declaration is missing a return type annotation.", null);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VoidSpecifierContext voidSpecifier() {
			return GetRuleContext<VoidSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ReturnTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterReturnTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitReturnTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeSpecifierContext returnTypeSpecifier() {
		ReturnTypeSpecifierContext _localctx = new ReturnTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnTypeSpecifier);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				voidSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				typeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Rad.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberTypeContext numberType() {
			return GetRuleContext<NumberTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeSpecifier);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				Match(COLON);
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNSIGNED:
				case INT_KEYWORD:
				case FLOAT_KEYWORD:
					{
					State = 82;
					numberType();
					}
					break;
				case ID:
					{
					State = 83;
					Match(ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(COLON);
				NotifyErrorListeners(TokenStream.LT(-1), $"A type identifier for \"{TokenStream.LT(-2).Text}\" is missing from this type annotation.", null);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Rad.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(Rad.VOID, 0); }
		public VoidSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterVoidSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitVoidSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoidSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoidSpecifierContext voidSpecifier() {
		VoidSpecifierContext _localctx = new VoidSpecifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_voidSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(COLON);
			State = 91;
			Match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementGroupContext statementGroup() {
			return GetRuleContext<StatementGroupContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			statementGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderedTupleContext orderedTuple() {
			return GetRuleContext<OrderedTupleContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(ID);
			State = 96;
			orderedTuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedTypeTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Rad.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Rad.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamedParametersContext namedParameters() {
			return GetRuleContext<NamedParametersContext>(0);
		}
		public NamedTypeTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedTypeTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterNamedTypeTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitNamedTypeTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedTypeTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedTypeTupleContext namedTypeTuple() {
		NamedTypeTupleContext _localctx = new NamedTypeTupleContext(Context, State);
		EnterRule(_localctx, 18, RULE_namedTypeTuple);
		int _la;
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				Match(LPAREN);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 99;
					namedParameters();
					}
				}

				State = 102;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(LPAREN);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 104;
					namedParameters();
					}
				}

				NotifyErrorListeners(TokenStream.LT(-1), "Missing closing \")\" in parenthetical.", null);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext[] namedParameter() {
			return GetRuleContexts<NamedParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedParameterContext namedParameter(int i) {
			return GetRuleContext<NamedParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Rad.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Rad.COMMA, i);
		}
		public NamedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterNamedParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitNamedParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedParametersContext namedParameters() {
		NamedParametersContext _localctx = new NamedParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_namedParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			namedParameter();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 111;
				Match(COMMA);
				State = 112;
				namedParameter();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public NamedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitNamedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedParameterContext namedParameter() {
		NamedParameterContext _localctx = new NamedParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_namedParameter);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(ID);
				State = 119;
				typeSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(ID);
				NotifyErrorListeners(TokenStream.LT(-1), $"Parameter \"{TokenStream.LT(-1).Text}\" is missing a type annotation.", null);
				         		
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedTupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(Rad.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(Rad.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderedParametersContext orderedParameters() {
			return GetRuleContext<OrderedParametersContext>(0);
		}
		public OrderedTupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedTuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterOrderedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitOrderedTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedTupleContext orderedTuple() {
		OrderedTupleContext _localctx = new OrderedTupleContext(Context, State);
		EnterRule(_localctx, 24, RULE_orderedTuple);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(LPAREN);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 33653248L) != 0) {
					{
					State = 125;
					orderedParameters();
					}
				}

				State = 128;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(LPAREN);
				State = 131;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 130;
					orderedParameters();
					}
					break;
				}
				NotifyErrorListeners(TokenStream.LT(-1), "Missing closing \")\" in parenthetical.", null);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderedParameterContext[] orderedParameter() {
			return GetRuleContexts<OrderedParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderedParameterContext orderedParameter(int i) {
			return GetRuleContext<OrderedParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Rad.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Rad.COMMA, i);
		}
		public OrderedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterOrderedParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitOrderedParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedParametersContext orderedParameters() {
		OrderedParametersContext _localctx = new OrderedParametersContext(Context, State);
		EnterRule(_localctx, 26, RULE_orderedParameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			orderedParameter();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 137;
					Match(COMMA);
					State = 138;
					orderedParameter();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderedParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public OrderedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderedParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterOrderedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitOrderedParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderedParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderedParameterContext orderedParameter() {
		OrderedParameterContext _localctx = new OrderedParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderedParameter);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(ID);
				}
				break;
			case DQUOTE:
			case SQUOTE:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURL() { return GetToken(Rad.LCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURL() { return GetToken(Rad.RCURL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefiniteStatementContext[] definiteStatement() {
			return GetRuleContexts<DefiniteStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefiniteStatementContext definiteStatement(int i) {
			return GetRuleContext<DefiniteStatementContext>(i);
		}
		public StatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementGroupContext statementGroup() {
		StatementGroupContext _localctx = new StatementGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_statementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(LCURL);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 33653632L) != 0) {
				{
				{
				State = 149;
				definiteStatement();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberTypeContext : ParserRuleContext {
		public IToken keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_KEYWORD() { return GetToken(Rad.INT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_KEYWORD() { return GetToken(Rad.FLOAT_KEYWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(Rad.UNSIGNED, 0); }
		public NumberTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterNumberType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitNumberType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberTypeContext numberType() {
		NumberTypeContext _localctx = new NumberTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_numberType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNSIGNED) {
				{
				State = 157;
				Match(UNSIGNED);
				}
			}

			State = 160;
			_localctx.keyword = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INT_KEYWORD || _la==FLOAT_KEYWORD) ) {
				_localctx.keyword = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Rad.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(Rad.OUT, 0); }
		public StatementKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterStatementKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitStatementKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementKeywordContext statementKeyword() {
		StatementKeywordContext _localctx = new StatementKeywordContext(Context, State);
		EnterRule(_localctx, 34, RULE_statementKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefiniteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(Rad.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementKeywordContext statementKeyword() {
			return GetRuleContext<StatementKeywordContext>(0);
		}
		public DefiniteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definiteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterDefiniteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitDefiniteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefiniteStatementContext definiteStatement() {
		DefiniteStatementContext _localctx = new DefiniteStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_definiteStatement);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURN || _la==OUT) {
					{
					State = 164;
					statementKeyword();
					}
				}

				State = 167;
				expression(0);
				State = 168;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURN || _la==OUT) {
					{
					State = 170;
					statementKeyword();
					}
				}

				State = 173;
				expression(0);
				 NotifyErrorListeners(TokenStream.LT(-1), "Missing \";\" at end of statement.", null);
						
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				statementKeyword();
				 NotifyErrorListeners(TokenStream.LT(-1), "Missing expression after keyword in statement.", null);
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(Rad.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Rad.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(Rad.FSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Rad.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Rad.MINUS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 182;
				literal();
				}
				break;
			case 2:
				{
				State = 183;
				functionCall();
				}
				break;
			case 3:
				{
				State = 184;
				Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 193;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 188;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==STAR || _la==FSLASH) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 189;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 191;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 192;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Rad.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(Rad.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Rad.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSLASH() { return GetToken(Rad.FSLASH, 0); }
		public BinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterBinaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitBinaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorContext binaryOperator() {
		BinaryOperatorContext _localctx = new BinaryOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_binaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_literal);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				numericLiteral();
				}
				break;
			case DQUOTE:
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Rad.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAG() { return GetToken(Rad.FLAG, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_numericLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(NUMBER);
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 205;
				Match(FLAG);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLAG() { return GetToken(Rad.FLAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(Rad.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(Rad.DQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(Rad.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(Rad.SQUOTE, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRadListener typedListener = listener as IRadListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRadVisitor<TResult> typedVisitor = visitor as IRadVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_stringLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DQUOTE:
				{
				{
				State = 208;
				Match(DQUOTE);
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 209;
						MatchWildcard();
						}
						} 
					}
					State = 214;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
				}
				State = 215;
				Match(DQUOTE);
				}
				}
				break;
			case SQUOTE:
				{
				{
				State = 216;
				Match(SQUOTE);
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 217;
						MatchWildcard();
						}
						} 
					}
					State = 222;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 223;
				Match(SQUOTE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 226;
				Match(FLAG);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,30,230,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,5,1,53,8,1,10,1,12,1,56,9,1,1,1,1,
		1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
		76,8,3,1,4,1,4,3,4,80,8,4,1,5,1,5,1,5,3,5,85,8,5,1,5,1,5,3,5,89,8,5,1,
		6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,3,9,101,8,9,1,9,1,9,1,9,3,9,106,
		8,9,1,9,3,9,109,8,9,1,10,1,10,1,10,5,10,114,8,10,10,10,12,10,117,9,10,
		1,11,1,11,1,11,1,11,3,11,123,8,11,1,12,1,12,3,12,127,8,12,1,12,1,12,1,
		12,3,12,132,8,12,1,12,3,12,135,8,12,1,13,1,13,1,13,5,13,140,8,13,10,13,
		12,13,143,9,13,1,14,1,14,3,14,147,8,14,1,15,1,15,5,15,151,8,15,10,15,12,
		15,154,9,15,1,15,1,15,1,16,3,16,159,8,16,1,16,1,16,1,17,1,17,1,18,3,18,
		166,8,18,1,18,1,18,1,18,1,18,3,18,172,8,18,1,18,1,18,1,18,1,18,1,18,1,
		18,3,18,180,8,18,1,19,1,19,1,19,1,19,3,19,186,8,19,1,19,1,19,1,19,1,19,
		1,19,1,19,5,19,194,8,19,10,19,12,19,197,9,19,1,20,1,20,1,21,1,21,3,21,
		203,8,21,1,22,1,22,3,22,207,8,22,1,23,1,23,5,23,211,8,23,10,23,12,23,214,
		9,23,1,23,1,23,1,23,5,23,219,8,23,10,23,12,23,222,9,23,1,23,3,23,225,8,
		23,1,23,3,23,228,8,23,1,23,2,212,220,1,38,24,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,5,1,0,4,5,1,0,7,8,2,0,21,21,
		24,24,1,0,22,23,1,0,21,24,237,0,48,1,0,0,0,2,54,1,0,0,0,4,59,1,0,0,0,6,
		75,1,0,0,0,8,79,1,0,0,0,10,88,1,0,0,0,12,90,1,0,0,0,14,93,1,0,0,0,16,95,
		1,0,0,0,18,108,1,0,0,0,20,110,1,0,0,0,22,122,1,0,0,0,24,134,1,0,0,0,26,
		136,1,0,0,0,28,146,1,0,0,0,30,148,1,0,0,0,32,158,1,0,0,0,34,162,1,0,0,
		0,36,179,1,0,0,0,38,185,1,0,0,0,40,198,1,0,0,0,42,202,1,0,0,0,44,204,1,
		0,0,0,46,224,1,0,0,0,48,49,3,2,1,0,49,1,1,0,0,0,50,53,3,36,18,0,51,53,
		3,4,2,0,52,50,1,0,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,
		1,0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,0,0,1,58,3,1,0,0,0,59,60,3,
		6,3,0,60,5,1,0,0,0,61,62,5,1,0,0,62,63,5,9,0,0,63,64,3,18,9,0,64,65,3,
		8,4,0,65,66,5,20,0,0,66,67,3,14,7,0,67,76,1,0,0,0,68,69,5,1,0,0,69,70,
		5,9,0,0,70,71,3,18,9,0,71,72,5,20,0,0,72,73,3,14,7,0,73,74,6,3,-1,0,74,
		76,1,0,0,0,75,61,1,0,0,0,75,68,1,0,0,0,76,7,1,0,0,0,77,80,3,12,6,0,78,
		80,3,10,5,0,79,77,1,0,0,0,79,78,1,0,0,0,80,9,1,0,0,0,81,84,5,19,0,0,82,
		85,3,32,16,0,83,85,5,9,0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,89,1,0,0,0,86,
		87,5,19,0,0,87,89,6,5,-1,0,88,81,1,0,0,0,88,86,1,0,0,0,89,11,1,0,0,0,90,
		91,5,19,0,0,91,92,5,2,0,0,92,13,1,0,0,0,93,94,3,30,15,0,94,15,1,0,0,0,
		95,96,5,9,0,0,96,97,3,24,12,0,97,17,1,0,0,0,98,100,5,11,0,0,99,101,3,20,
		10,0,100,99,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,109,5,12,0,0,103,
		105,5,11,0,0,104,106,3,20,10,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,
		1,0,0,0,107,109,6,9,-1,0,108,98,1,0,0,0,108,103,1,0,0,0,109,19,1,0,0,0,
		110,115,3,22,11,0,111,112,5,17,0,0,112,114,3,22,11,0,113,111,1,0,0,0,114,
		117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,21,1,0,0,0,117,115,1,0,
		0,0,118,119,5,9,0,0,119,123,3,10,5,0,120,121,5,9,0,0,121,123,6,11,-1,0,
		122,118,1,0,0,0,122,120,1,0,0,0,123,23,1,0,0,0,124,126,5,11,0,0,125,127,
		3,26,13,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,135,5,12,
		0,0,129,131,5,11,0,0,130,132,3,26,13,0,131,130,1,0,0,0,131,132,1,0,0,0,
		132,133,1,0,0,0,133,135,6,12,-1,0,134,124,1,0,0,0,134,129,1,0,0,0,135,
		25,1,0,0,0,136,141,3,28,14,0,137,138,5,17,0,0,138,140,3,28,14,0,139,137,
		1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,27,1,0,0,0,
		143,141,1,0,0,0,144,147,5,9,0,0,145,147,3,42,21,0,146,144,1,0,0,0,146,
		145,1,0,0,0,147,29,1,0,0,0,148,152,5,13,0,0,149,151,3,36,18,0,150,149,
		1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,
		0,154,152,1,0,0,0,155,156,5,14,0,0,156,31,1,0,0,0,157,159,5,3,0,0,158,
		157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,7,0,0,0,161,33,1,0,
		0,0,162,163,7,1,0,0,163,35,1,0,0,0,164,166,3,34,17,0,165,164,1,0,0,0,165,
		166,1,0,0,0,166,167,1,0,0,0,167,168,3,38,19,0,168,169,5,18,0,0,169,180,
		1,0,0,0,170,172,3,34,17,0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,
		0,0,173,174,3,38,19,0,174,175,6,18,-1,0,175,180,1,0,0,0,176,177,3,34,17,
		0,177,178,6,18,-1,0,178,180,1,0,0,0,179,165,1,0,0,0,179,171,1,0,0,0,179,
		176,1,0,0,0,180,37,1,0,0,0,181,182,6,19,-1,0,182,186,3,42,21,0,183,186,
		3,16,8,0,184,186,5,9,0,0,185,181,1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,
		0,186,195,1,0,0,0,187,188,10,5,0,0,188,189,7,2,0,0,189,194,3,38,19,6,190,
		191,10,4,0,0,191,192,7,3,0,0,192,194,3,38,19,5,193,187,1,0,0,0,193,190,
		1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,39,1,0,0,0,
		197,195,1,0,0,0,198,199,7,4,0,0,199,41,1,0,0,0,200,203,3,44,22,0,201,203,
		3,46,23,0,202,200,1,0,0,0,202,201,1,0,0,0,203,43,1,0,0,0,204,206,5,25,
		0,0,205,207,5,10,0,0,206,205,1,0,0,0,206,207,1,0,0,0,207,45,1,0,0,0,208,
		212,5,15,0,0,209,211,9,0,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,213,1,
		0,0,0,212,210,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,225,5,15,0,0,
		216,220,5,16,0,0,217,219,9,0,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,221,
		1,0,0,0,220,218,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,225,5,16,0,
		0,224,208,1,0,0,0,224,216,1,0,0,0,225,227,1,0,0,0,226,228,5,10,0,0,227,
		226,1,0,0,0,227,228,1,0,0,0,228,47,1,0,0,0,30,52,54,75,79,84,88,100,105,
		108,115,122,126,131,134,141,146,152,158,165,171,179,185,193,195,202,206,
		212,220,224,227
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RadLexer
